<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        body {
            display: flex;
            align-items: center;
            flex-direction: column;
            height: 90vh;
            overflow: hidden;
            background-color: rgb(24, 24, 24);
        }

        .message {
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
        }

        .message.my-message {
            justify-content: flex-end;
        }

        .content {

            border-radius: 10px;
            padding: 10px 15px 10px 15px;
            max-width: 80%;
            background-color: rgb(46, 46, 46);
            color: rgb(240, 240, 240);

        }

        .perfil {
            border-radius: 50%;
        }

        ul {
            list-style: none;
            padding: 0;
            width: 100%;

        }

        ul li {
            padding: 10px;
            margin: 0px 0px 10px 0px;
            /* Margem padrão para mensagens */

        }

        .message.my-message .content {
            background-color: rgb(21, 80, 48);
        }

        .message .content {
            background-color: rgb(32 32 32);
        }

        p {
            margin: 0px;
        }

        code {
            display: flex;
            font-size: 10px;
            width: 100%;
            line-height: 1;
            color: white;
            align-items: right;
            justify-content: right;
        }

        .perfil-wrapper {
            display: flex;
            padding-top: 0px;
            margin-right: 10px;
        }

        .message:first-child {
            margin-top: 10px;
        }

        #messageForm {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            background-color: rgb(24, 24, 24);
            box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
            width: 100%;
        }

        #messageInput {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 20px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;

        }

        #messageInput:focus {
            border-color: darkgreen;
            box-shadow: 0 0 5px darkgreen
        }

        #messageForm button {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgb(32 32 32);
            width: 50px;
            height: 50px;
            border-radius: 50%;
            font-size: 18px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;

        }

        #messageForm button:hover {
            transform: scale(1.1);
        }

        @media (max-width: 600px) {
            #messageForm {

                gap: 5px;
            }

            #messageInput {
                min-width: 80%;
            }

            #messageForm button {
                width: 100%;
                height: 40px;
                border-radius: 10px;
                font-size: 16px;
            }

            #sendButton {
                background-color: #007bff;
            }
        }
    </style>
    <script src="/socket.io/socket.io.js"></script>

    <script defer>
        function autoResize(textarea) {
            // Reseta a altura para calcular a nova altura
            textarea.style.height = 'auto';

            // Garante que o conteúdo do textarea não ultrapasse o limite e ajusta a altura
            const scrollHeight = textarea.scrollHeight;


            // Ajusta a altura com base no conteúdo, adicionando um pequeno espaçamento para evitar corte de texto
            textarea.style.height = (scrollHeight + 2) + 'px';

            console.log(global.style.marginBottom);
            console.log(textarea.style.marginBottom);
            textarea.addEventListener('blur', function () {
                if (this.value.trim() === "") {
                    this.style.height = "50px";  // Ajusta para 50px se estiver vazio
                    const global = document.getElementById('global');
                    const height = parseInt(window.getComputedStyle(textarea).height);
                    global.style.marginBottom = height - 50 + 'px';
                }
            });
        }



        const socket = io(); // Conecta ao servidor WebSocket

        socket.on('updateMessages', (messages) => {
            const messagesList = document.getElementById('messages');
            messagesList.innerHTML = ''; // Limpa as mensagens antigas
            let lastUser = ""; // Variável para armazenar o último usuário

            messages.forEach((msg) => {
                const isUserMessage = msg.usuario === "<%= user.username %>";
                const isFirstMessageFromUser = msg.usuario !== lastUser; // Verifica se é a primeira mensagem de uma sequência

                const li = document.createElement('li');

                // Aplica a margem maior apenas para a primeira mensagem de uma sequência
                li.style.marginTop = isFirstMessageFromUser ? '0px' : '0px';
                li.style.marginBottom = isFirstMessageFromUser ? '0px' : '0px';
                li.style.paddingTop = isFirstMessageFromUser ? '0px' : '0px';
                li.style.paddingBottom = isFirstMessageFromUser ? '5px' : '5px';
                const marginTop = isFirstMessageFromUser ? '10px' : '0px'; // Menor espaçamento para mensagens subsequentes

                if (isUserMessage) {
                    li.innerHTML = `
                    ${isFirstMessageFromUser ? ` 
                    <div class="message my-message" style="display: flex;">      
                        <div class="content" style="text-align: left; margin-left: 50px;">
                            <p>${msg.texto}</p>
                            <code>${msg.created}</code>
                        </div>
                        <div class="perfil-wrapper" style="margin-left: 10px; margin-right: 0px;">
                            <div class="perfil" style="border: 1px solid black; width: 35px; height: 35px; background-image: url(${msg.foto}); background-size: cover; background-position: center;"></div>
                        </div>
                    </div>` : `
                    <div class="message my-message" style="display: flex; margin: 0px;"> 
                    <div class="content" style="text-align: left; margin-left: 50px;">
                            <p>${msg.texto}</p>
                            <code>${msg.created}</code>
                        </div>
                        <div class="perfil-wrapper" style="margin-left: 10px; margin-right: 0px; opacity: 0;">
                            <div class="perfil" style="border: 1px solid black; width: 35px; height: 35px; background-image: url(${msg.foto}); background-size: cover; background-position: center;"></div>
                        </div>
                        </div>
                    `}`

                } else {
                    li.innerHTML = `
                    <div class="message" style="display: flex; flex-direction: row; margin-top: ${marginTop}">       
                        ${isFirstMessageFromUser ? `
                        <div class="perfil-wrapper">
                            <div class="perfil" style="border: 1px solid black; width: 35px; height: 35px; background-image: url(${msg.foto}); background-size: cover; background-position: center;"></div>
                        </div>
                        <div class="content" style="max-width: 80%; margin-right: 50px">
                            <strong>${msg.usuario}</strong>
                            <p>${msg.texto}</p>
                            <code>${msg.created}</code>
                        </div>` : `
                        <div class="perfil-wrapper" style="opacity: 0;">
                            <div class="perfil" style="border: 1px solid black; width: 35px; height: 35px; background-image: url(${msg.foto}); background-size: cover; background-position: center;"></div>
                        </div>
                        <div class="content" style="margin-right: 50px;">
                            <p>${msg.texto}</p>
                            <code>${msg.created}</code>
                        </div>
                        
                        `}
                    </div>`;
                }

                lastUser = msg.usuario; // Atualiza o último usuário
                messagesList.appendChild(li);
            });
        });

        async function loadMessages() {
            try {
                const response = await fetch('/api/messages');
                if (response.ok) {
                    const messages = await response.json();
                    const messagesList = document.getElementById('messages');
                    let lastUser = ""; // Variável para armazenar o último usuário
                    setTimeout(() => {
                        const messagesList = document.getElementById('messages');
                        const lastMessage = messagesList.lastElementChild;
                        if (lastMessage) {
                            lastMessage.scrollIntoView({ behavior: 'smooth' });
                        }
                    }, 200);

                    messages.forEach((msg) => {
                        const isUserMessage = msg.usuario === "<%= user.username %>";
                        const isFirstMessageFromUser = msg.usuario !== lastUser;

                        const li = document.createElement('li');

                        // Aplica a margem maior apenas para a primeira mensagem de uma sequência
                        li.style.marginTop = isFirstMessageFromUser ? '0px' : '0px';
                        li.style.marginBottom = isFirstMessageFromUser ? '0px' : '0px';
                        li.style.paddingTop = isFirstMessageFromUser ? '0px' : '0px';
                        li.style.paddingBottom = isFirstMessageFromUser ? '5px' : '5px';
                        const marginTop = isFirstMessageFromUser ? '10px' : '0px'; // Menor espaçamento para mensagens subsequentes

                        if (isUserMessage) {
                            li.innerHTML = `
                            ${isFirstMessageFromUser ? ` 
                    <div class="message my-message" style="display: flex;">      
                        
                        <div class="content" style="text-align: left; margin-left: 50px;">
                            <p>${msg.texto}</p>
                            <code>${msg.created}</code>
                        </div>
                        <div class="perfil-wrapper" style="margin-left: 10px; margin-right: 0px;">
                            <div class="perfil" style="border: 1px solid black; width: 35px; height: 35px; background-image: url(${msg.foto}); background-size: cover; background-position: center;"></div>
                        </div>
                    </div>` : `
                    <div class="message my-message" style="display: flex; margin: 0px;"> 
                    <div class="content" style="text-align: left; margin-left: 50px;" >
                            <p>${msg.texto}</p>
                            <code>${msg.created}</code>
                        </div>
                        <div class="perfil-wrapper" style="margin-left: 10px; margin-right: 0px; opacity: 0;">
                            <div class="perfil" style="border: 1px solid black; width: 35px; height: 35px; background-image: url(${msg.foto}); background-size: cover; background-position: center;"></div>
                        </div>

                        </div>
                    `}`

                        } else {
                            li.innerHTML = `
                            <div class="message" style="display: flex; flex-direction: row; margin-top: ${marginTop}">       
                                ${isFirstMessageFromUser ? `
                                <div class="perfil-wrapper">
                                    <div class="perfil" style="border: 1px solid black; width: 35px; height: 35px; background-image: url(${msg.foto}); background-size: cover; background-position: center;"></div>
                                </div>
                                <div class="content" style="max-width: 80%; margin-right: 40px;">
                                    <strong>${msg.usuario}</strong>
                                    <p>${msg.texto}</p>
                                    <code>${msg.created}</code>
                                </div>` : `
                                <div class="perfil-wrapper" style="opacity: 0;">
                                    <div class="perfil" style="border: 1px solid black; width: 35px; height: 35px; background-image: url(${msg.foto}); background-size: cover; background-position: center;"></div>
                                </div>
                                <div class="content" style="margin-right: 50px">
                                    <p>${msg.texto}</p>
                                    <code>${msg.created}</code>
                                </div>`}
                            </div>`;
                        }

                        lastUser = msg.usuario; // Atualiza o último usuário
                        messagesList.appendChild(li);
                    });
                } else {
                    console.error('Erro ao carregar mensagens');
                }
            } catch (error) {
                console.error('Erro ao carregar mensagens:', error);
            }
        }

        window.onload = loadMessages;
        async function sendMessage(event) {
            event.preventDefault();
            const input = document.getElementById('messageInput');
            const usuario = "<%= user.username %>";
            const texto = input.value.trim();

            if (!texto) {
                alert('Digite uma mensagem!');
                return;
            }

            try {
                const response = await fetch('/api/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ usuario, texto }),
                });

                if (response.ok) {
                    input.value = ''; // Limpa o campo
                    setTimeout(() => {
                        const messagesList = document.getElementById('messages');
                        const lastMessage = messagesList.lastElementChild;
                        if (lastMessage) {
                            lastMessage.scrollIntoView({ behavior: 'smooth' });
                            document.getElementById('messageInput').style.height = "50px";
                        }
                    }, 200);
                } else {
                    console.error('Erro ao enviar mensagem');
                }
            } catch (error) {
                console.error('Erro ao enviar mensagem:', error);
            }
        }
    </script>

</head>

<body>
    <div id="global" style="width: 100%; overflow-y: scroll; background: url('https://i.pinimg.com/736x/58/c3/33/58c33377dfcbb3022493dec49d098b02.jpg');
    background-size: cover;
    background-position: center;">
        <ul id="messages">
            <!-- As mensagens serão carregadas aqui dinamicamente -->
        </ul>
    </div>

    <form id="messageForm" onsubmit="sendMessage(event)"
        style="display: flex; align-items: center; gap: 10px; padding: 10px; position: fixed; bottom: 0px; ">
        <!-- Área de texto expandível -->
        <textarea id="messageInput" placeholder="Digite sua mensagem..."
            style="resize: none; flex: 1; height: 50px; max-height: 200px; padding: 10px; border-radius: 10px; font-size: 16px;"
            oninput="autoResize(this)"></textarea>

        <!-- Botão de enviar -->
        <button id="messageButton" type="submit"
            style="color: white; border: none; border-radius: 50%; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; font-size: 18px; cursor: pointer;">
            &#10148; <!-- Ícone de envio (pode ser substituído por um ícone Font Awesome ou SVG) -->
        </button>
    </form>
</body>

</html>
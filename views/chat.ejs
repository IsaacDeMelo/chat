<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #121212;
            color: #e0e0e0;
            height: 100vh;
            overflow: hidden;
        }

        .message {
            display: flex;
            flex-direction: column;
            margin-bottom: 8px;
            max-width: 80%;
        }

        .mention {
            color: #888;
            /* cor padr√£o pra todos */
            font-weight: bold;
            cursor: pointer;
        }

        .mention.highlighted {
            color: red;
            /* cor forte s√≥ para o mencionado */
        }


        .message.my-message {
            align-items: flex-end;
            margin-left: 20%;
        }

        .message.other-message {
            align-items: flex-start;
            margin-right: 20%;
        }

        .content {
            border-radius: 18px;
            padding: 12px 16px;
            background-color: #2d2d2d;
            color: #ffffff;
            word-break: break-word;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            line-height: 1.4;
            position: relative;
            box-sizing: border-box;
        }

        .message img.blackImg {
            max-width: 100%;
            width: fit-content;
            border-radius: 12px;
            margin-bottom: 8px;
        }

        .message.my-message .content,
        .message.my-message img.blackImg {
            background-color: #1a73e8;
            border-bottom-right-radius: 4px;
        }

        .message.other-message .content,
        .message.other-message img.blackImg {
            background-color: #2d2d2d;
            border-top-left-radius: 4px;
        }

        .perfil {
            border-radius: 50%;
            width: 32px;
            height: 32px;
            object-fit: cover;
            margin-right: 8px;
        }

        ul {
            list-style: none;
            padding: 16px 12px 80px;
            width: 100%;
            margin: 0;
        }

        ul li {
            padding: 0;
            margin: 0;
        }

        .message-header {
            display: flex;
            align-items: center;
            margin-bottom: 4px;
        }

        .message-time {
            font-size: 11px;
            color: rgba(255, 255, 255, 0.6);
            margin-top: 4px;
            text-align: right;
        }


        .blackImg {
            background-color: rgb(32 32 32);
            border-radius: 10px;
            border: 5px solid rgba(0, 0, 0, 0.1);
        }

        * {
            scrollbar-width: thin;
            /* Firefox: pouco espessas üí° */
            scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
            /* Polegar p√°lido sobre fundo transparente */
        }

        /* Chrome/Safari/WebKit */
        ::-webkit-scrollbar {
            width: 6px;
            height: 6px;
            background: transparent;
            /* Track invis√≠vel */
        }

        ::-webkit-scrollbar-thumb {
            background-color: rgba(255, 255, 255, 0.2);
            /* Thumb sutil */
            border-radius: 3px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background-color: rgba(255, 255, 255, 0.4);
            /* Leve realce no hover */
        }

        .message.my-message .content {
            background-color: #1a73e8;
            width: 100%;
        }

        .message .content {
            background-color: #2d2d2d;
            width: 100%;
        }

        p {
            margin: 0px;
        }

        code {
            display: flex;
            font-size: 10px;
            width: 100%;
            line-height: 1;
            color: white;
            align-items: right;
            justify-content: right;
        }

        .perfil-wrapper {
            display: flex;
            padding-top: 0px;
            margin-right: 10px;
        }

        .message:first-child {
            margin-top: 10px;
        }

        #messageForm {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 16px;
            background-color: #1e1e1e;
            box-shadow: 0 -1px 3px rgba(0, 0, 0, 0.3);
            width: 100%;
            box-sizing: border-box;
        }

        #messageInput {
            flex: 1;
            padding: 12px 16px;
            border: none;
            border-radius: 24px;
            font-size: 16px;
            outline: none;
            background-color: #2d2d2d;
            color: #ffffff;
            min-height: 48px;
            max-height: 120px;
            resize: none;
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.2);
            transition: height 0.2s ease;
            overflow-y: hidden;
        }

        #global {
            padding-top: 20px;
            height: 100%;
            width: 100%;
            overflow-y: scroll;
            background: url('https://i.pinimg.com/736x/58/c3/33/58c33377dfcbb3022493dec49d098b02.jpg');
            background-size: cover;
            background-attachment: fixed;
            background-position: center;
        }

        #messageInput:focus {
            border-color: #1a73e8;
            box-shadow: 0 0 5px rgba(26, 115, 232, 0.5);
        }

        #messageForm button {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgb(32 32 32);
            width: 50px;
            height: 50px;
            border-radius: 50%;
            font-size: 18px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;

        }

        #messageForm button:hover {
            transform: scale(1.1);
        }

        .guide {
            display: none;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            position: fixed;
            opacity: 0;
            transition: 0.5s all linear;
            top: 0;
            background: #2d2d2d;
            padding: 20px;
            width: 100%;
            height: 100%;
            z-index: 30;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .config {
            display: none;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            position: fixed;
            opacity: 0;
            transition: 0.5s all linear;
            top: 0;
            background: #2d2d2d;
            padding: 20px;
            width: 100%;
            height: 100%;
            z-index: 30;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .switch {
            display: flex;
            width: 100%;
            height: 100%;
            align-items: center;
            gap: 10px;
            padding: 10px;
            cursor: pointer;
            justify-content: space-between;
            user-select: none;
        }

        .switch input {
            display: none;
        }

        .slider {
            width: 50px;
            height: 26px;
            background-color: #ccc;
            border-radius: 50px;
            position: relative;
            transition: background-color 0.3s ease;
        }

        .slider::before {
            content: "";
            position: absolute;
            height: 20px;
            width: 20px;
            left: 3px;
            top: 3px;
            background-color: white;
            border-radius: 50%;
            transition: transform 0.3s ease;
        }

        /* Estilo quando o switch est√° ligado ficha */
        input:checked+.slider {
            background-color: #1a73e8;
        }

        input:checked+.slider::before {
            transform: translateX(24px);
        }

        .switch-label {
            font-size: 14px;
        }

        @media (min-width: 500px) {
            #messageForm {

                gap: 5px;
            }

            #messageInput {
                min-width: 60%;
            }

            #messageForm button {
                width: 100%;
                height: 40px;
                border-radius: 10px;
                font-size: 16px;
            }

            #global {
                padding-top: 20px;
                height: 100%;
                width: 100%;
                overflow-y: scroll;
                background: url('https://i.pinimg.com/736x/58/c3/33/58c33377dfcbb3022493dec49d098b02.jpg');
                background-attachment: fixed;
                background-size: 300px;
                background-position: top;

            }


        }

        .tab-btn {
            background-color: #1a73e8;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s;
        }

        .tab-btn:hover {
            background-color: #2a91ff;
        }

        body {
            background: #1e1e2f;
            color: white;
            font-family: sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .radar-chart {
            width: 100%;
            min-height: 220px;
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        text {
            fill: white;
            font-size: 22px;
            font-weight: bold;
        }
    </style>
    <script type="text/template" id="usuario-data">
        <%- JSON.stringify(user) %>
    </script>
    <script src="/socket.io/socket.io.js"></script>

    <script defer>
        var User;
        var messagesBackup;

        function previewImage(event) {
            const file = event.target.files[0];
            if (!file) return;

            // Check if file is an image ficha
            if (!file.type.match('image.*')) {
                alert('Por favor, selecione uma imagem v√°lida!');
                return;
            }

            const reader = new FileReader();
            const imagePreview = document.getElementById('imagePreview');
            const previewImage = document.getElementById('previewImage');

            reader.onload = function (e) {
                previewImage.src = e.target.result;
                imagePreview.style.display = 'block';

                // Adjust global container margin to account for preview
                const global = document.getElementById('global');
                global.style.marginBottom = '200px';
            };

            reader.onerror = function () {
                alert('Erro ao carregar a imagem. Por favor, tente novamente.');
            };

            reader.readAsDataURL(file);
        }

        document.addEventListener('DOMContentLoaded', function () {
            // eslint-disable-next-line
            try {
                const personagem = JSON.parse(document.getElementById('usuario-data').textContent)
                let totalAtb = (
                    personagem.data.atributos.forca +
                    personagem.data.atributos.resistencia +
                    personagem.data.atributos.velocidade +
                    personagem.data.atributos.agilidade +
                    personagem.data.atributos.nen
                );
                if (personagem.data.familia == "Zoldyck") {
                    personagem.data.atributos.forca = personagem.data.atributos.forca * 1.10
                    personagem.data.atributos.velocidade = personagem.data.atributos.velocidade * 1.15
                } else if (personagem.data.familia == "Uzuki") {
                    personagem.data.atributos.forca = personagem.data.atributos.forca * 1.10
                    personagem.data.atributos.velocidade = personagem.data.atributos.velocidade * 1.10
                } else if (personagem.data.familia == "Freecs") {
                    personagem.data.atributos.forca = personagem.data.atributos.forca * 1.25
                    personagem.data.atributos.resistencia = personagem.data.atributos.resistencia * 1.25
                } else if (personagem.data.familia == "Netero") {
                    personagem.data.atributos.forca = personagem.data.atributos.forca * 1.20
                    personagem.data.atributos.resistencia = personagem.data.atributos.resistencia * 1.20
                } else if (personagem.data.familia == "Ryusegai") {
                    personagem.data.atributos.forca = personagem.data.atributos.forca * 1.20
                    personagem.data.atributos.velocidade = personagem.data.atributos.velocidade * 1.15
                    personagem.data.atributos.resistencia = personagem.data.atributos.resistencia * 1.10
                }
                const attributes = {
                    F: parseFloat(personagem.data.atributos.forca.toFixed(1)),         // For√ßa
                    R: parseFloat(personagem.data.atributos.resistencia.toFixed(1)),   // Resist√™ncia
                    V: parseFloat(personagem.data.atributos.velocidade.toFixed(1)),    // Velocidade
                    A: parseFloat(personagem.data.atributos.agilidade.toFixed(1)),     // Agilidade
                    N: parseFloat(personagem.data.atributos.nen.toFixed(1))            // Nen
                };
                const colors = {
                    F: '#FF4C4C',  // vermelho
                    R: '#3399FF',  // laranja
                    V: '#FFA500',  // verde
                    A: '#00CC66',  // azul
                    N: '#AA00FF'   // roxo
                };

                const thresholds = [
                    { min: 0, max: 20, value: 20 },
                    { min: 21, max: 100, value: 100 },
                    { min: 101, max: 200, value: 200 },
                    { min: 201, max: 500, value: 500 },
                    { min: 501, max: 1000, value: 1000 },
                    { min: 1001, max: 2000, value: 2000 },
                    { min: 2001, max: 5000, value: 5000 },
                    { min: 5001, max: Infinity, value: 10000 }
                ];

                // Encontra o valor adequado para maxVal
                for (const t of thresholds) {
                    if (totalAtb >= t.min && totalAtb <= t.max) {
                        maxVal = t.value;
                        break;
                    }
                }
                console.log(maxVal);
                const centerX = 300;
                const centerY = 300;
                const radius = 200;
                const labels = ['F', 'R', 'V', 'A', 'N'];
                const angleStep = (2 * Math.PI) / 5;

                const svg = document.getElementById("radarSvg");

                function polarToCartesian(angle, valueRatio) {
                    const r = radius * valueRatio;
                    return {
                        x: centerX + r * Math.sin(angle),
                        y: centerY - r * Math.cos(angle)
                    };
                }

                // Draw base pentagon
                for (let step = 1; step <= 5; step++) {
                    let points = [];
                    for (let i = 0; i < 5; i++) {
                        const angle = angleStep * i;
                        const pos = polarToCartesian(angle, step / 5);
                        points.push(`${pos.x},${pos.y}`);
                    }
                    const polygon = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
                    polygon.setAttribute("points", points.join(" "));
                    polygon.setAttribute("stroke", "#888");
                    polygon.setAttribute("fill", "none");
                    svg.appendChild(polygon);
                }

                // Draw attribute polygon
                const attributePoints = [];
                let prevPos = null;
                let i = 0;

                for (let key of labels) {
                    const angle = angleStep * i;
                    const value = attributes[key];
                    const ratio = value / maxVal;
                    const pos = polarToCartesian(angle, ratio);
                    attributePoints.push(pos);

                    // Desenha linha colorida se houver ponto anterior
                    if (prevPos) {
                        const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                        line.setAttribute("x1", prevPos.x);
                        line.setAttribute("y1", prevPos.y);
                        line.setAttribute("x2", pos.x);
                        line.setAttribute("y2", pos.y);
                        line.setAttribute("stroke", colors[key]);
                        line.setAttribute("stroke-width", "3");
                        svg.appendChild(line);
                    }

                    prevPos = pos;
                    i++;
                }

                // Fecha o pol√≠gono com linha colorida final
                const firstPos = attributePoints[0];
                const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                line.setAttribute("x1", prevPos.x);
                line.setAttribute("y1", prevPos.y);
                line.setAttribute("x2", firstPos.x);
                line.setAttribute("y2", firstPos.y);
                line.setAttribute("stroke", colors[labels[0]]);
                line.setAttribute("stroke-width", "3");
                svg.appendChild(line);

                const filledPolygon = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
                filledPolygon.setAttribute("points", attributePoints.map(p => `${p.x},${p.y}`).join(" "));
                filledPolygon.setAttribute("fill", "rgba(100, 150, 255, 0.3)");  // cor azulada neutra com transpar√™ncia
                filledPolygon.setAttribute("stroke", "none");
                svg.appendChild(filledPolygon);


                // Draw lines and labels
                i = 0;
                for (let key of labels) {
                    const angle = angleStep * i;
                    const outer = polarToCartesian(angle, 1);
                    // Draw line
                    const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                    line.setAttribute("x1", centerX);
                    line.setAttribute("y1", centerY);
                    line.setAttribute("x2", outer.x);
                    line.setAttribute("y2", outer.y);
                    line.setAttribute("stroke", "#666");
                    svg.appendChild(line);

                    // Add label
                    const label = document.createElementNS("http://www.w3.org/2000/svg", "text");
                    label.setAttribute("x", outer.x);
                    label.setAttribute("y", outer.y);
                    label.setAttribute("text-anchor", "middle");
                    label.setAttribute("dy", angle < Math.PI ? "-10" : "20");
                    label.textContent = `${key} (${attributes[key]})`;
                    svg.appendChild(label);
                    i++;
                }
            } catch (err) {
                console.log(err);
            }
            try {
                User = document.getElementById('self').dataset.user;
                const imageInput = document.getElementById('imageInput');
                imageInput.addEventListener('change', previewImage);  // Usando eventListener

                const previewImageElement = document.getElementById('previewImage');
                previewImageElement.addEventListener('click', function () {
                    // Reseta o campo de entrada de imagem quando clicar na pr√©-visualiza√ß√£o
                    const imageInput = document.getElementById('imageInput');
                    imageInput.value = ''; // Cancela o upload da imagem
                    document.getElementById('imagePreview').style.display = 'none'; // Oculta a pr√©-visualiza√ß√£o
                });
            } catch (err) {

            }
        });

        function autoResize(textarea) {
            // Reset height to calculate new height /ficha
            textarea.style.height = 'auto';

            // Calculate the required height
            const maxHeight = 120; // Maximum height in pixels
            const scrollHeight = textarea.scrollHeight;

            // Set the height, not exceeding maxHeight
            textarea.style.height = Math.min(scrollHeight, maxHeight) + 'px';

            // Only show scrollbar when at max height
            textarea.style.overflowY = scrollHeight > maxHeight ? 'auto' : 'hidden';
        }

        const socket = io(); // Conecta ao servidor WebSocket


        let filterMentions = false; // Estado do filtro
        const currentUser = "<%= user.username %>"; // Nome do usu√°rio atual
        document.addEventListener('DOMContentLoaded', () => {
            const toggleFilterBtn = document.getElementById('toggleFilterBtn');
            toggleFilterBtn.addEventListener('change', () => {
                filterMentions = toggleFilterBtn.checked;
                console.log(filterMentions)
                // Atualiza as mensagens com base no novo filtro
                socket.emit('requestMessages')
            });
        });


        function updateChat(messages) {
            messagesBackup = messages;
            const messagesList = document.getElementById('messages');
            messagesList.innerHTML = '';
            let lastUser = "";
            function isUserMentioned(text, user) {
                const regex = /@([^@]+)@/g;
                let match;
                while ((match = regex.exec(text)) !== null) {
                    if (match[1].trim().toLowerCase() === user.toLowerCase()) {
                        return true;
                    }
                }
                return false;
            }

            messages
                .filter(msg => {
                    if (!filterMentions) return true;
                    return msg.usuario === currentUser || isUserMentioned(msg.texto, currentUser);
                })
                .forEach((msg) => {
                    const isUserMessage = msg.usuario === currentUser;
                    const isFirstMessageFromUser = msg.usuario !== lastUser;

                    const li = document.createElement('li');
                    li.style.marginTop = isFirstMessageFromUser ? '0px' : '0px';
                    li.style.marginBottom = isFirstMessageFromUser ? '0px' : '0px';
                    li.style.paddingTop = isFirstMessageFromUser ? '0px' : '0px';
                    li.style.paddingBottom = isFirstMessageFromUser ? '0px' : '5px';

                    if (isUserMessage) {
                        li.innerHTML = `
                    <div class="message my-message">
                        ${msg.imageUrl ? `
                            <img class="blackImg" src="${msg.imageUrl}" alt="Image" style="max-width: 100%; border-radius: 12px; margin-bottom: 8px;">
                        ` : ''}
                        <div class="content">
                            <p>${formatMessageText(msg.texto)}</p>
                            <div class="message-time">${msg.created}</div>
                        </div>
                        ${isFirstMessageFromUser ? `
                            <div class="message-header" style="margin-top: 8px;">
                                <img class="perfil" src="${msg.foto}" alt="Profile">
                            </div>
                        ` : ''}
                    </div>
                `;
                    } else {
                        li.innerHTML = `
                    <div class="message other-message">
                        ${isFirstMessageFromUser ? `
                            <div class="message-header">
                                <img class="perfil" src="${msg.foto}" alt="Profile">
                                <strong>${msg.usuario}</strong>
                            </div>
                        ` : ''}
                        ${msg.imageUrl ? `
                            <img class="blackImg" src="${msg.imageUrl}" alt="Image" style="max-width: 100%; border-radius: 12px; margin-bottom: 8px;">
                        ` : ''}
                        <div class="content">
                            <p>${formatMessageText(msg.texto)}</p>
                            <div class="message-time">${msg.created}</div>
                        </div>
                    </div>
                `;
                    }

                    lastUser = msg.usuario;
                    messagesList.appendChild(li);
                });
        }

        socket.on('updateMessages', (messages) => {
            updateChat(messages);
        });


        async function loadMessages() {
            try {
                const response = await fetch('/api/messages');
                if (response.ok) {
                    const messages = await response.json();
                    const messagesList = document.getElementById('messages');
                    let lastUser = ""; // Vari√°vel para armazenar o √∫ltimo usu√°rio
                    setTimeout(() => {
                        const messagesList = document.getElementById('messages');
                        const lastMessage = messagesList.lastElementChild;
                        if (lastMessage) {
                            lastMessage.scrollIntoView({ behavior: 'smooth' });
                        }
                    }, 1000);
                }

            } catch (error) {
                console.error('Erro ao carregar mensagens:', error);
            }
        }

        window.onload = loadMessages;


        document.addEventListener('DOMContentLoaded', function () {
            // Sidebar toggle functionality
            document.getElementById('sidebarToggle').addEventListener('click', function () {
                document.getElementById('sidebar').style.left = '0';
            });

            document.getElementById('closeSidebar').addEventListener('click', function () {
                document.getElementById('sidebar').style.left = '-300px';
            });
        })

        // Close sidebar when clicking outside
        document.addEventListener('click', function (event) {
            const sidebar = document.getElementById('sidebar');
            const toggleBtn = document.getElementById('sidebarToggle');
            if (!sidebar.contains(event.target) && event.target !== toggleBtn && sidebar.style.left === '0px') {
                sidebar.style.left = '-300px';
            }
        });
        function formatMessageText(text) {
            text = text.replace(/\n/g, '<br>');

            text = text.replace(/\*(.*?)\*/g, '<strong>$1</strong>');
            text = text.replace(/_([^_]+)_/g, '<em>$1</em>');
            text = text.replace(/-(.*?)-/g, '<u>$1</u>');
            text = text.replace(/\(&quot;(.*?)&quot;\)/g, '<q>$1</q>');
            text = text.replace(/\(([^)]+)\)/g, '<q>$1</q>');
            text.replace(/\[(.*?)\]/g, '<span style="color: #ff9800;">$1</span>');
            text = text.replace(/~(.*?)~/g, '<span style="color: #4caf50; background: #4caf5020; padding: 0 4px; border-radius: 3px;">$1</span>');

            // Men√ß√µes com @Nome@ (pode ter espa√ßos)
            try {
                text = text.replace(/@([^@]+)@/g, (match, mentioned) => {
                    if (mentioned.trim().toLowerCase() === User.toLowerCase()) {
                        return `<span style="color: #1a73e8; font-weight: bold; border-radius: 5px; padding: 1px; background-color: #1a73e820; ;">@${mentioned}@</span>`;
                    } else {
                        return match;
                    }
                });
            } catch (err) {
            }

            return text;
        }

        async function sendMessage(event) {
            event.preventDefault();
            const input = document.getElementById('messageInput');
            let messageText = input.value.trim();

            // Apply formatting if not empty
            if (messageText) {
                messageText = formatMessageText(messageText);
            }
            const messageButton = document.getElementById('messageButton');
            messageButton.disabled = true;
            const usuario = "<%= user.username %>";
            const texto = input.value; // Don't trim to preserve newlines
            const imageInput = document.getElementById('imageInput');  // Refer√™ncia ao input de imagem


            if (!texto && imageInput.files.length === 0) {
                alert('Digite uma mensagem ou selecione uma imagem!');
                return;
            }

            // Cria o FormData para enviar tanto texto quanto imagem
            const formData = new FormData();
            formData.append('usuario', usuario);
            formData.append('texto', texto);

            // Se uma imagem foi selecionada, adiciona ela ao FormData
            if (imageInput.files.length > 0) {
                formData.append('image', imageInput.files[0]);
            }

            try {
                input.value = ''; // Limpa o campo de texto
                imageInput.value = ''; // Limpa o campo de imagem (se houver)
                document.getElementById('imagePreview').style.display = 'none'; // Esconde o preview
                document.getElementById('global').style.marginBottom = '0'; // Reseta a margem
                const response = await fetch('/api/messages', {
                    method: 'POST',
                    body: formData, // Envia o FormData
                });


                if (response.ok) {
                    input.value = ''; // Limpa o campo de texto
                    imageInput.value = ''; // Limpa o campo de imagem (se houver)
                    messageButton.disabled = false;
                    // Aguarda a atualiza√ß√£o da interface ap√≥s a mensagem ser enviada
                    setTimeout(() => {
                        const messagesList = document.getElementById('messages');
                        const lastMessage = messagesList.lastElementChild;
                        if (lastMessage) {
                            lastMessage.scrollIntoView({ behavior: 'smooth' });
                            document.getElementById('messageInput').style.height = "50px";
                        }
                    }, 200);
                } else {
                    console.error('Erro ao enviar mensagem');
                }
            } catch (error) {
                console.error('Erro ao enviar mensagem:', error);
            }
        }

        function showGuide() {
            document.getElementById('formattingGuideModal').style.display = 'flex'
            setTimeout(() => {
                document.getElementById('formattingGuideModal').style.opacity = '1'
            }, 100);
        }
        function showConfig() {
            document.getElementById('config').style.display = 'flex'
            setTimeout(() => {
                document.getElementById('config').style.opacity = '1'
            }, 100);
        }
        function ocultGuide() {
            document.getElementById('formattingGuideModal').style.opacity = '0'
            setTimeout(() => {
                document.getElementById('formattingGuideModal').style.display = 'none'
            }, 500);
        }
        function ocultConfig() {
            document.getElementById('config').style.opacity = '0'
            setTimeout(() => {
                document.getElementById('config').style.display = 'none'
            }, 500);
        }
        function showTab(tabId) {
            const allTabs = document.querySelectorAll('.tab-content');
            allTabs.forEach(tab => tab.style.display = 'none');

            const selectedTab = document.getElementById(`tab-${tabId}`);
            if (selectedTab) selectedTab.style.display = 'block';
        }
        function goToGame(){
            window.location.href = '/open-world/<%=user.password%>';
        }

    </script>

</head>

<body>
    <div id="chatHeader"
        style="position: fixed; top: 0; left: 0; right: 0; height: 72px; background-color: #1e1e1e; display: flex; align-items: center; padding: 0 16px; border-bottom: 1px solid #333; z-index: 10;">
        <div style="display: flex; align-items: center; gap: 12px; width: 100%;">
            <img id="chatProfile" src="https://i.pinimg.com/736x/ee/51/73/ee5173dd81b2abc23de6df5a5b671548.jpg"
                style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;">
            <div style="flex: 1;">
                <h3 style="margin: 0; color: #fff; font-size: 16px;">Grupo RPG</h3>
                <p style="margin: 0; color: #9e9e9e; font-size: 12px;">Lyonel Pesyac.</p>
            </div>
            <button id="sidebarToggle"
                style="background: none; border: none; color: #fff; font-size: 20px; cursor: pointer;">‚ò∞</button>
        </div>
    </div>
    <div id="global"
        style="padding-top: 144px; margin-bottom: 20px; padding-bottom: 20px; overflow-y: auto; -webkit-overflow-scrolling: touch;">
        <ul id="messages" style="margin: 0; padding: 8px; padding-bottom: 80px;">
            <!-- As mensagens ser√£o carregadas aqui dinamicamente em -->
        </ul>
    </div>
    <div id="imagePreview"
        style="position: fixed; bottom: 72px; left: 0; right: 0; background: #1e1e1e; padding: 16px; display: none; border-top: 1px solid #333; z-index: 10; max-height: 200px; overflow: auto; border-radius: 12px 12px 0 0;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
            <span style="color: #fff; font-size: 14px;">Pr√©-visualiza√ß√£o</span>
            <button
                onclick="document.getElementById('imagePreview').style.display='none'; document.getElementById('imageInput').value='';"
                style="background: none; border: none; color: #fff; cursor: pointer;">√ó</button>
        </div>
        <img id="previewImage" src="" alt="Pr√©-visualiza√ß√£o da imagem"
            style="max-height: 180px; max-width: 100%; border-radius: 8px; display: block; margin: 0 auto; background-color: #2d2d2d; border: 5px solid rgba(0, 0, 0, 0.1);" />
    </div>
    <div id="formattingGuideModal" class="guide">
        <img src="https://media.tenor.com/S7E33qGuPkYAAAAi/hikari-shupogaki.gif"
            style="margin: 5px; border: 1px solid #1a73e8; width: 40%; border-radius: 50%;">
        <div
            style="max-width: 400px; width: 90%; background: #2d2d2d; border-radius: 12px; padding: 20px; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
            <h3 style="margin: 0 0 20px; color: #1a73e8; text-align: center; font-size: 20px;">Guia de Formata√ß√£o</h3>

            <!-- NAVBAR -->
            <div style="display: flex; justify-content: center; gap: 8px; margin-bottom: 20px;">
                <button class="tab-btn" onclick="showTab('formatacao')"
                    style="background: #333; color: #ccc; border: none; padding: 8px 16px; border-radius: 20px; cursor: pointer; transition: all 0.2s; font-size: 14px;">Formata√ß√£o</button>
                <button class="tab-btn" onclick="showTab('comandos')"
                    style="background: #333; color: #ccc; border: none; padding: 8px 16px; border-radius: 20px; cursor: pointer; transition: all 0.2s; font-size: 14px;">Comandos</button>
            </div>

            <!-- ABA: FORMATA√á√ÉO -->
            <div class="tab-content" id="tab-formatacao">
                <ul
                    style="margin: 0; padding: 0; list-style: none; display: grid; grid-template-columns: 1fr; gap: 12px;">
                    <li
                        style="display: flex; align-items: center; justify-content: space-between; padding: 10px; background: #333; border-radius: 8px;">
                        <span style="color: #ccc;"><code>*negrito*</code></span>
                        <span style="color: #fff; font-weight: bold;"><code>‚Üí negrito</code></span>
                    </li>
                    <li
                        style="display: flex; align-items: center; justify-content: space-between; padding: 10px; background: #333; border-radius: 8px;">
                        <span style="color: #ccc;"><code>_it√°lico_</code></span>
                        <span style="color: #fff; font-style: italic;"><code>‚Üí it√°lico</code></span>
                    </li>
                    <li
                        style="display: flex; align-items: center; justify-content: space-between; padding: 10px; background: #333; border-radius: 8px;">
                        <span style="color: #ccc;"><code>_sublinhado_</code></span>
                        <span style="color: #fff; text-decoration: underline;"><code>‚Üí sublinhado</code></span>
                    </li>
                    <li
                        style="display: flex; align-items: center; justify-content: space-between; padding: 10px; background: #333; border-radius: 8px;">
                        <span style="color: #ccc;"><code>~spoiler~</code></span>
                        <span
                            style="color: #4caf50; background: rgba(76, 175, 80, 0.1); padding: 2px 6px; border-radius: 4px;"><code>‚Üí spoiler</code></span>
                    </li>
                </ul>
            </div>

            <!-- ABA: COMANDOS -->
            <div class="tab-content" id="tab-comandos" style="display: none;">
                <ul
                    style="margin: 0; padding: 0; list-style: none; display: grid; grid-template-columns: 1fr; gap: 12px;">
                    <li style="padding: 12px; background: #333; border-radius: 8px;">
                        <code
                            style="display: block; color: #1a73e8; margin-bottom: 4px; font-size: 14px;">/dado Jogador, Inimigo</code>
                        <span style="color: #ccc; font-size: 13px;">Rola um dado para cada nome, podem ser aliados,
                            inimigos.. etc. Pode ser feito individualmente tamb√©m.</span>
                    </li>
                    <li style="padding: 12px; background: #333; border-radius: 8px;">
                        <code
                            style="display: block; color: #1a73e8; margin-bottom: 4px; font-size: 14px;">@nome de algu√©m@</code>
                        <span style="color: #ccc; font-size: 13px;">Destaca uma mensagem para algu√©m em
                            espec√≠fico</span>
                    </li>
                </ul>
            </div>

            <!-- Bot√£o fechar -->
            <button onclick="ocultGuide()"
                style="background: #1a73e8; color: white; border: none; padding: 10px 20px; border-radius: 20px; margin-top: 20px; cursor: pointer; width: 100%; font-weight: bold; transition: background 0.2s;">Fechar</button>
        </div>
    </div>
    <div id="config" class="config">
        <img src="https://media.tenor.com/44zpcrJfsKcAAAAi/tachibana-hikari-tachibana-nozomi.gif"
            style="margin: 5px; border: 1px solid #1a73e8; width: 40%; border-radius: 50%;">
        <div
            style="max-width: 400px; width: 90%; background: #2d2d2d; border-radius: 12px; padding: 20px; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
            <h3 style="margin: 0 0 20px; color: #1a73e8; text-align: center; font-size: 20px;">Configura√ß√µes</h3>
            <div class="tab-content-config" id="tab-formatacao">
                <ul
                    style="margin: 0; padding: 0; list-style: none; display: grid; grid-template-columns: 1fr; gap: 12px;">
                    <li
                        style="display: flex; align-items: center; justify-content: space-between; background: #333; border-radius: 8px;">
                        <label class="switch">
                            <span class="switch-label">Filtrar Mensagens</span>
                            <input type="checkbox" id="toggleFilterBtn">
                            <span class="slider"></span>
                        </label>
                    </li>
                </ul>
            </div>
            <!-- Bot√£o fechar -->
            <button onclick="ocultConfig()"
                style="background: #1a73e8; color: white; border: none; padding: 10px 20px; border-radius: 20px; margin-top: 20px; cursor: pointer; width: 100%; font-weight: bold; transition: background 0.2s;">Fechar</button>
        </div>


    </div>
    <% if (user.data && user.adm == true) {%>
    <button type="button" onclick="goToGame()"
        style="position: fixed; right: 140px; top: 90px; background: #2d2d2d; border: none; padding: 8px; color: #9e9e9e; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2); z-index: 25;">
        <svg viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <title>alipay_line</title> <g id="È°µÈù¢-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="Brand" transform="translate(-48.000000, -0.000000)"> <g id="alipay_line" transform="translate(48.000000, 0.000000)"> <path d="M24,0 L24,24 L0,24 L0,0 L24,0 Z M12.5934901,23.257841 L12.5819402,23.2595131 L12.5108777,23.2950439 L12.4918791,23.2987469 L12.4918791,23.2987469 L12.4767152,23.2950439 L12.4056548,23.2595131 C12.3958229,23.2563662 12.3870493,23.2590235 12.3821421,23.2649074 L12.3780323,23.275831 L12.360941,23.7031097 L12.3658947,23.7234994 L12.3769048,23.7357139 L12.4804777,23.8096931 L12.4953491,23.8136134 L12.4953491,23.8136134 L12.5071152,23.8096931 L12.6106902,23.7357139 L12.6232938,23.7196733 L12.6232938,23.7196733 L12.6266527,23.7031097 L12.609561,23.275831 C12.6075724,23.2657013 12.6010112,23.2592993 12.5934901,23.257841 L12.5934901,23.257841 Z M12.8583906,23.1452862 L12.8445485,23.1473072 L12.6598443,23.2396597 L12.6498822,23.2499052 L12.6498822,23.2499052 L12.6471943,23.2611114 L12.6650943,23.6906389 L12.6699349,23.7034178 L12.6699349,23.7034178 L12.678386,23.7104931 L12.8793402,23.8032389 C12.8914285,23.8068999 12.9022333,23.8029875 12.9078286,23.7952264 L12.9118235,23.7811639 L12.8776777,23.1665331 C12.8752882,23.1545897 12.8674102,23.1470016 12.8583906,23.1452862 L12.8583906,23.1452862 Z M12.1430473,23.1473072 C12.1332178,23.1423925 12.1221763,23.1452606 12.1156365,23.1525954 L12.1099173,23.1665331 L12.0757714,23.7811639 C12.0751323,23.7926639 12.0828099,23.8018602 12.0926481,23.8045676 L12.108256,23.8032389 L12.3092106,23.7104931 L12.3186497,23.7024347 L12.3186497,23.7024347 L12.3225043,23.6906389 L12.340401,23.2611114 L12.337245,23.2485176 L12.337245,23.2485176 L12.3277531,23.2396597 L12.1430473,23.1473072 Z" id="MingCute" fill-rule="nonzero"> </path> <path d="M20.2253,17.6889 C18.4201,20.2939 15.4093,22 12,22 C6.47715,22 2,17.5228 2,12 C2,6.47715 6.47715,2 12,2 C17.5228,2 22,6.47715 22,12 C22,13.9924 21.4173,15.8487 20.413,17.4079 C20.4122,17.4098 20.4113,17.4118 20.4104,17.4138 C20.363,17.5181 20.2999,17.6103 20.2253,17.6889 Z M4,12 C4,7.58172 7.58172,4 12,4 C16.4183,4 20,7.58172 20,12 C20,13.3397 19.6707,14.6025 19.0886,15.7118 C18.2611,15.3304 17.4964,14.9706 16.7884,14.6375 C16.041,14.2858 15.3568,13.9639 14.7282,13.6774 C15.1373,12.8756 15.5415,11.9371 15.9398,10.8417 C16.0513,10.5352 16.0062,10.1935 15.8191,9.9263 C15.6319,9.65911 15.3262,9.5 15,9.5 L13,9.5 L13,9 L16,9 C16.5523,9 17,8.55228 17,8 C17,7.44772 16.5523,7 16,7 L13,7 L13,6 C13,5.44772 12.5523,5 12,5 C11.4477,5 11,5.44772 11,6 L11,7 L8,7 C7.44772,7 7,7.44772 7,8 C7,8.55228 7.44772,9 8,9 L11,9 L11,9.5 L9,9.5 C8.44771,9.5 8,9.94772 8,10.5 C8,11.0523 8.44771,11.5 9,11.5 L13.5345,11.5 C13.3152,12.0178 13.0989,12.477 12.8869,12.8842 C11.4939,12.3336 10.2676,12 9,12 C7.47994,12 6,13.316 6,15 C6,16.8201 7.63195,18 9.5,18 C10.5201,18 11.648,17.6412 12.7696,16.5196 C13.0809,16.2083 13.3905,15.8397 13.6978,15.4057 C14.3552,15.7026 15.0716,16.0399 15.8763,16.4188 C16.5009,16.7129 17.1788,17.0321 17.9236,17.3769 C16.4601,18.9883 14.3482,20 12,20 C7.58172,20 4,16.4183 4,12 Z M9,14 C9.82654,14 10.6871,14.1943 11.7969,14.608 C11.6454,14.798 11.498,14.9628 11.3554,15.1054 C10.602,15.8588 9.97992,16 9.5,16 C8.36805,16 8,15.3799 8,15 C8,14.484 8.52006,14 9,14 Z" id="ÂΩ¢Áä∂" fill="#9e9e9e"> </path> </g> </g> </g> </g></svg>
    </button>
    <% } %>
    <button type="button" onclick="showGuide()"
        style="position: fixed; right: 20px; top: 90px; background: #2d2d2d; border: none; padding: 8px; color: #9e9e9e; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2); z-index: 25;">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
                d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            <path d="M8 14C8 14 9.5 16 12 16C14.5 16 16 14 16 14" stroke="currentColor" stroke-width="2"
                stroke-linecap="round" stroke-linejoin="round" />
            <path d="M9 9H9.01" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            <path d="M15 9H15.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                stroke-linejoin="round" />
        </svg>
    </button>
    <button type="button" onclick="showConfig()"
        style="position: fixed; right: 80px; top: 90px; background: #2d2d2d; border: none; padding: 8px; color: #9e9e9e; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2); z-index: 25;">
        <svg version="1.1" id="_x32_" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
            viewBox="0 0 512 512" xml:space="preserve" fill="#9e9e9e">
            <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
            <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
            <g id="SVGRepo_iconCarrier">
                <style type="text/css">
                    .st0 {
                        fill: #9e9e9e;
                    }
                </style>
                <g>
                    <path class="st0"
                        d="M496,293.984c9.031-0.703,16-8.25,16-17.297v-41.375c0-9.063-6.969-16.594-16-17.313l-54.828-4.281 c-3.484-0.266-6.484-2.453-7.828-5.688l-18.031-43.516c-1.344-3.219-0.781-6.906,1.5-9.547l35.75-41.813 c5.875-6.891,5.5-17.141-0.922-23.547l-29.25-29.25c-6.406-6.406-16.672-6.813-23.547-0.922l-41.813,35.75 c-2.641,2.266-6.344,2.844-9.547,1.516l-43.531-18.047c-3.219-1.328-5.422-4.375-5.703-7.828l-4.266-54.813 C293.281,6.969,285.75,0,276.688,0h-41.375c-9.063,0-16.594,6.969-17.297,16.016l-4.281,54.813c-0.266,3.469-2.469,6.5-5.688,7.828 l-43.531,18.047c-3.219,1.328-6.906,0.75-9.563-1.516l-41.797-35.75c-6.875-5.891-17.125-5.484-23.547,0.922l-29.25,29.25 c-6.406,6.406-6.797,16.656-0.922,23.547l35.75,41.813c2.25,2.641,2.844,6.328,1.5,9.547l-18.031,43.516 c-1.313,3.234-4.359,5.422-7.813,5.688L16,218c-9.031,0.719-16,8.25-16,17.313v41.359c0,9.063,6.969,16.609,16,17.313l54.844,4.266 c3.453,0.281,6.5,2.484,7.813,5.703l18.031,43.516c1.344,3.219,0.75,6.922-1.5,9.563l-35.75,41.813 c-5.875,6.875-5.484,17.125,0.922,23.547l29.25,29.25c6.422,6.406,16.672,6.797,23.547,0.906l41.797-35.75 c2.656-2.25,6.344-2.844,9.563-1.5l43.531,18.031c3.219,1.344,5.422,4.359,5.688,7.844l4.281,54.813 c0.703,9.031,8.234,16.016,17.297,16.016h41.375c9.063,0,16.594-6.984,17.297-16.016l4.266-54.813 c0.281-3.484,2.484-6.5,5.703-7.844l43.531-18.031c3.203-1.344,6.922-0.75,9.547,1.5l41.813,35.75 c6.875,5.891,17.141,5.5,23.547-0.906l29.25-29.25c6.422-6.422,6.797-16.672,0.922-23.547l-35.75-41.813 c-2.25-2.641-2.844-6.344-1.5-9.563l18.031-43.516c1.344-3.219,4.344-5.422,7.828-5.703L496,293.984z M256,342.516 c-23.109,0-44.844-9-61.188-25.328c-16.344-16.359-25.344-38.078-25.344-61.203c0-23.109,9-44.844,25.344-61.172 c16.344-16.359,38.078-25.344,61.188-25.344c23.125,0,44.844,8.984,61.188,25.344c16.344,16.328,25.344,38.063,25.344,61.172 c0,23.125-9,44.844-25.344,61.203C300.844,333.516,279.125,342.516,256,342.516z">
                    </path>
                </g>
            </g>
        </svg>
    </button>
    <% if (true) {%>
        <form id="messageForm" onsubmit="sendMessage(event)"
            style="position: fixed; bottom: 0; left: 0; right: 0; z-index: 20;">
            <div
                style="display: flex; align-items: center; gap: 4px; padding: 12px 10px; width: 100%; box-sizing: border-box;">
                <button type="button" onclick="document.getElementById('imageInput').click()"
                    style="background: none; border: none; padding: 8px; color: #9e9e9e; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer;">
                    <svg width="64px" height="64px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                        <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                        <g id="SVGRepo_iconCarrier">
                            <path
                                d="M3 13V11C3 7.22876 3 5.34315 4.17157 4.17157C5.34315 3 7.22876 3 11 3H13C16.7712 3 18.6569 3 19.8284 4.17157C21 5.34315 21 7.22876 21 11V13C21 16.7712 21 18.6569 19.8284 19.8284C18.6569 21 16.7712 21 13 21H12"
                                stroke="#ffffff"></path>
                            <path fill-rule="evenodd" clip-rule="evenodd"
                                d="M18.9976 14.2904L18.4033 13.6961L18.3931 13.6858L18.393 13.6858C18.3245 13.6173 18.2784 13.5712 18.2394 13.5353C17.0477 12.4403 15.1454 12.749 14.3611 14.1647C14.3354 14.2111 14.3062 14.2694 14.2628 14.3561L14.2564 14.369C14.227 14.4278 14.22 14.4416 14.2161 14.4486C14.0513 14.7448 13.6458 14.7948 13.4142 14.5474C13.4087 14.5415 13.3985 14.5298 13.3557 14.4799L8.37962 8.67449C8.19991 8.46483 7.88426 8.44055 7.6746 8.62026C7.46494 8.79997 7.44065 9.11562 7.62037 9.32528L12.5964 15.1307L12.6038 15.1393L12.6038 15.1393C12.6352 15.1759 12.6614 15.2066 12.6842 15.2309C13.3793 15.9731 14.5957 15.8233 15.09 14.9348C15.1062 14.9056 15.1242 14.8695 15.1458 14.8263L15.1508 14.8162C15.203 14.712 15.2218 14.6746 15.2358 14.6493C15.7064 13.7999 16.8478 13.6147 17.5628 14.2717C17.5841 14.2912 17.6138 14.3208 17.6962 14.4032L18.9755 15.6825C18.9887 15.2721 18.9948 14.812 18.9976 14.2904Z"
                                fill="#ffffff"></path>
                            <circle cx="16.5" cy="7.5" r="1.5" fill="#ffffff"></circle>
                            <path
                                d="M8 16V15.5H8.5V16H8ZM3.31235 20.3904C3.09672 20.5629 2.78207 20.528 2.60957 20.3123C2.43706 20.0967 2.47202 19.7821 2.68765 19.6096L3.31235 20.3904ZM7.5 21V16H8.5V21H7.5ZM8 16.5H3V15.5H8V16.5ZM8.31235 16.3904L3.31235 20.3904L2.68765 19.6096L7.68765 15.6096L8.31235 16.3904Z"
                                fill="#ffffff"></path>
                        </g>
                    </svg>
                </button>
                <textarea id="messageInput" placeholder="Digite sua mensagem..."
                    style="resize: none; flex: 1 1 auto; height: 50px; max-height: 200px; padding: 8px 10px; border-radius: 10px; font-size: 16px; margin: 0 5px;"
                    oninput="autoResize(this)"></textarea>

                <!-- Campo para upload de imagem configura√ß√µes-->
                <input type="file" id="imageInput" accept="image/*" style="display: none;" />
                <!-- Bot√£o de enviar -->
                <button id="messageButton" type="submit"
                    style="background-color: #1a73e8; color: white; border: none; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: background-color 0.2s;">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                        <path d="M22 2L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
                        <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="currentColor" stroke-width="2"
                            stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </button>
            </div>
        </form>
        <%}%>
            </div>
            </div>
            <div id="sidebar"
                style="position: fixed; top: 0; left: -300px; width: 300px; height: 100vh; background-color: #1e1e1e; z-index: 30; transition: left 0.3s; overflow-y: auto; border-right: 1px solid #333;">
                <div style="padding: 16px; border-bottom: 1px solid #333;">
                    <div
                        style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                        <h3 style="margin: 0; color: #fff;">Membros do Grupo</h3>
                        <button id="closeSidebar"
                            style="background: none; border: none; color: #fff; font-size: 20px; cursor: pointer;">√ó</button>
                    </div>
                    <div id="membersList"
                        style="max-height: 322px; overflow-y: scroll; display: flex; flex-direction: column; gap: 8px;">
                        <% users.forEach(element=> {%>
                            <div
                                style="display: flex; align-items: center; gap: 12px; padding: 8px; border-radius: 8px; background-color: #2d2d2d;">
                                <img src="<%=element.perfil%>"
                                    style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;">
                                <div>
                                    <% if (user.username==element.username) { %>
                                        <p id="self" style="margin: 0; color: #fff;" data-user="<%=element.username%>">
                                            (Voc√™)
                                            <%=element.username%>
                                        </p>
                                        <% } else {%>
                                            <p style="margin: 0; color: #fff;">
                                                <%=element.username%>
                                            </p>
                                            <%}%>

                                                <p style="margin: 0; color: #9e9e9e; font-size: 12px;">
                                                    <%=element.number%>
                                                </p>
                                </div>
                            </div>
                            <%});%>
                    </div>
                </div>
                <% try { if (user.data.nome !="Personagem" ){%>
                    <div class="radar-chart">
                        <h3 style="margin: 0px; padding-top: 20px">
                            <%=user.data.nome%>
                                <%=user.data.familia%>
                        </h3>
                        <p style="font-size: 15px">Atributos</p>
                        <svg viewBox="0 0 600 600" id="radarSvg"></svg>
                    </div>
                    <% } else { %>
                        <div class="radar-chart">
                            <h3 style="margin: 0px; padding-top: 20px">
                                Sem Personagem
                            </h3>
                            <button
                                style="background: #1a73e8; border: none; padding: 10px 20px; border-radius: 20px; margin-top: 20px; cursor: pointer; width: 70%; font-weight: bold; transition: background 0.2s;"><a
                                    href="/ficha/<%=user.password%>" style="text-decoration: none; color: white;">Crie
                                    ele agora</a></button>
                        </div>
                        <% }} catch (err) { %>
                            <div class="radar-chart">
                                <h3 style="margin: 0px; padding-top: 20px">
                                    Sem Personagem
                                </h3>
                                <button
                                    style="background: #1a73e8; border: none; padding: 10px 20px; border-radius: 20px; margin-top: 20px; cursor: pointer; width: 70%; font-weight: bold; transition: background 0.2s;"><a
                                        href="/ficha/<%=user.password%>"
                                        style="text-decoration: none; color: white;">Crie ele agora</a></button>
                            </div>
                            <%}%>
            </div>
            </div>
</body>

</html>
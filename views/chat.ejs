<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #121212;
            color: #e0e0e0;
            height: 100vh;
            overflow: hidden;
        }

        .message {
            display: flex;
            flex-direction: column;
            margin-bottom: 8px;
            max-width: 80%;
        }

        .message.my-message {
            align-items: flex-end;
            margin-left: 20%;
        }

        .message.other-message {
            align-items: flex-start;
            margin-right: 20%;
        }

        .content {
            border-radius: 18px;
            padding: 12px 16px;
            background-color: #2d2d2d;
            color: #ffffff;
            word-break: break-word;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            line-height: 1.4;
            position: relative;
            box-sizing: border-box;
        }

        .message img.blackImg {
            max-width: 100%;
            width: fit-content;
            border-radius: 12px;
            margin-bottom: 8px;
        }

        .message.my-message .content,
        .message.my-message img.blackImg {
            background-color: #1a73e8;
            border-bottom-right-radius: 4px;
        }

        .message.other-message .content,
        .message.other-message img.blackImg {
            background-color: #2d2d2d;
            border-top-left-radius: 4px;
        }

        .perfil {
            border-radius: 50%;
            width: 32px;
            height: 32px;
            object-fit: cover;
            margin-right: 8px;
        }

        ul {
            list-style: none;
            padding: 16px 12px 80px;
            width: 100%;
            margin: 0;
        }

        ul li {
            padding: 0;
            margin: 0;
        }

        .message-header {
            display: flex;
            align-items: center;
            margin-bottom: 4px;
        }

        .message-time {
            font-size: 11px;
            color: rgba(255,255,255,0.6);
            margin-top: 4px;
            text-align: right;
        }


        .blackImg {
            background-color: rgb(32 32 32);
            border-radius: 10px;
            border: 5px solid rgba(0, 0, 0, 0.1);
        }

        .message.my-message .content {
            background-color: #1a73e8;
            width: 100%;
        }

        .message .content {
            background-color: #2d2d2d;
            width: 100%;
        }

        p {
            margin: 0px;
        }

        code {
            display: flex;
            font-size: 10px;
            width: 100%;
            line-height: 1;
            color: white;
            align-items: right;
            justify-content: right;
        }

        .perfil-wrapper {
            display: flex;
            padding-top: 0px;
            margin-right: 10px;
        }

        .message:first-child {
            margin-top: 10px;
        }

        #messageForm {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 16px;
            background-color: #1e1e1e;
            box-shadow: 0 -1px 3px rgba(0,0,0,0.3);
            width: 100%;
            box-sizing: border-box;
        }

        #messageInput {
            flex: 1;
            padding: 12px 16px;
            border: none;
            border-radius: 24px;
            font-size: 16px;
            outline: none;
            background-color: #2d2d2d;
            color: #ffffff;
            min-height: 48px;
            max-height: 120px;
            resize: none;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.2);
            transition: height 0.2s ease;
            overflow-y: hidden;
        }

        #global {
            padding-top: 20px;
            height: 100%;
            width: 100%;
            overflow-y: scroll;
            background: url('https://i.pinimg.com/736x/58/c3/33/58c33377dfcbb3022493dec49d098b02.jpg');
            background-size: cover;
            background-attachment: fixed;
            background-position: center;
        }

        #messageInput:focus {
            border-color: #1a73e8;
            box-shadow: 0 0 5px rgba(26, 115, 232, 0.5);
        }

        #messageForm button {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgb(32 32 32);
            width: 50px;
            height: 50px;
            border-radius: 50%;
            font-size: 18px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;

        }

        #messageForm button:hover {
            transform: scale(1.1);
        }

        @media (min-width: 500px) {
            #messageForm {

                gap: 5px;
            }

            #messageInput {
                min-width: 60%;
            }

            #messageForm button {
                width: 100%;
                height: 40px;
                border-radius: 10px;
                font-size: 16px;
            }

            #global {
                padding-top: 20px;
                height: 100%;
                width: 100%;
                overflow-y: scroll;
                background: url('https://i.pinimg.com/736x/58/c3/33/58c33377dfcbb3022493dec49d098b02.jpg');
                background-attachment: fixed;
                background-size: 300px;
                background-position: top;

            }


        }
    
    </style>
    <script src="/socket.io/socket.io.js"></script>

    <script defer>
        function previewImage(event) {
            const file = event.target.files[0];
            if (!file) return;

            // Check if file is an image
            if (!file.type.match('image.*')) {
                alert('Por favor, selecione uma imagem válida!');
                return;
            }

            const reader = new FileReader();
            const imagePreview = document.getElementById('imagePreview');
            const previewImage = document.getElementById('previewImage');

            reader.onload = function(e) {
                previewImage.src = e.target.result;
                imagePreview.style.display = 'block';
                
                // Adjust global container margin to account for preview
                const global = document.getElementById('global');
                global.style.marginBottom = '200px';
            };

            reader.onerror = function() {
                alert('Erro ao carregar a imagem. Por favor, tente novamente.');
            };

            reader.readAsDataURL(file);
        }

        document.addEventListener('DOMContentLoaded', function () {
            const imageInput = document.getElementById('imageInput');
            imageInput.addEventListener('change', previewImage);  // Usando eventListener

            const previewImageElement = document.getElementById('previewImage');
            previewImageElement.addEventListener('click', function () {
                // Reseta o campo de entrada de imagem quando clicar na pré-visualização
                const imageInput = document.getElementById('imageInput');
                imageInput.value = ''; // Cancela o upload da imagem
                document.getElementById('imagePreview').style.display = 'none'; // Oculta a pré-visualização
            });
        });


        function autoResize(textarea) {
            // Reset height to calculate new height
            textarea.style.height = 'auto';
            
            // Calculate the required height
            const maxHeight = 120; // Maximum height in pixels
            const scrollHeight = textarea.scrollHeight;
            
            // Set the height, not exceeding maxHeight
            textarea.style.height = Math.min(scrollHeight, maxHeight) + 'px';
            
            // Only show scrollbar when at max height
            textarea.style.overflowY = scrollHeight > maxHeight ? 'auto' : 'hidden';
        }

        const socket = io(); // Conecta ao servidor WebSocket

        socket.on('updateMessages', (messages) => {
            const messagesList = document.getElementById('messages');
            messagesList.innerHTML = ''; // Limpa as mensagens antigas
            let lastUser = ""; // Variável para armazenar o último usuário

            messages.forEach((msg) => {
                const isUserMessage = msg.usuario === "<%= user.username %>";
                const isFirstMessageFromUser = msg.usuario !== lastUser; // Verifica se é a primeira mensagem de uma sequência

                const li = document.createElement('li');

                // Aplica a margem maior apenas para a primeira mensagem de uma sequência
                li.style.marginTop = isFirstMessageFromUser ? '0px' : '0px';
                li.style.marginBottom = isFirstMessageFromUser ? '0px' : '0px';
                li.style.paddingTop = isFirstMessageFromUser ? '0px' : '0px';
                li.style.paddingBottom = isFirstMessageFromUser ? '0px' : '5px'; 
                const marginTop = isFirstMessageFromUser ? '10px' : '0px'; // Menor espaçamento para mensagens subsequentes

                if (isUserMessage) {
                    li.innerHTML = `
                        <div class="message my-message">
                            ${msg.imageUrl ? `
                                <img class="blackImg" src="${msg.imageUrl}" alt="Image" style="max-width: 100%; border-radius: 12px; margin-bottom: 8px;">
                            ` : ''}
                            <div class="content">
                                <p>${formatMessageText(msg.texto)}</p>
                                <div class="message-time">${msg.created}</div>
                            </div>
                            ${isFirstMessageFromUser ? `
                                <div class="message-header" style="margin-top: 8px;">
                                    <img class="perfil" src="${msg.foto}" alt="Profile">
                                </div>
                            ` : ''}
                        </div>
                    `;
                } else {
                    li.innerHTML = `
                        <div class="message other-message">
                            ${isFirstMessageFromUser ? `
                                <div class="message-header">
                                    <img class="perfil" src="${msg.foto}" alt="Profile">
                                    <strong>${msg.usuario}</strong>
                                </div>
                            ` : ''}
                            ${msg.imageUrl ? `
                                <img class="blackImg" src="${msg.imageUrl}" alt="Image" style="max-width: 100%; border-radius: 12px; margin-bottom: 8px;">
                            ` : ''}
                            <div class="content">
                                <p>${formatMessageText(msg.texto)}</p>
                                <div class="message-time">${msg.created}</div>
                            </div>
                        </div>
                    `;
                }
                lastUser = msg.usuario; // Atualiza o último usuário
                messagesList.appendChild(li);
            });
        });

        async function loadMessages() {
            try {
                const response = await fetch('/api/messages');
                if (response.ok) {
                    const messages = await response.json();
                    const messagesList = document.getElementById('messages');
                    let lastUser = ""; // Variável para armazenar o último usuário
                    setTimeout(() => {
                        const messagesList = document.getElementById('messages');
                        const lastMessage = messagesList.lastElementChild;
                        if (lastMessage) {
                            lastMessage.scrollIntoView({ behavior: 'smooth' });
                        }
                    }, 1000);
                }

            } catch (error) {
                console.error('Erro ao carregar mensagens:', error);
            }
        }

        window.onload = loadMessages;


        document.addEventListener('DOMContentLoaded', function () {
        // Sidebar toggle functionality
        document.getElementById('sidebarToggle').addEventListener('click', function() {
            document.getElementById('sidebar').style.left = '0';
        });

        document.getElementById('closeSidebar').addEventListener('click', function() {
            document.getElementById('sidebar').style.left = '-300px';
        });
    })

        // Close sidebar when clicking outside
        document.addEventListener('click', function(event) {
            const sidebar = document.getElementById('sidebar');
            const toggleBtn = document.getElementById('sidebarToggle');
            if (!sidebar.contains(event.target) && event.target !== toggleBtn && sidebar.style.left === '0px') {
                sidebar.style.left = '-300px';
            }
        });
        function formatMessageText(text) {
            // First replace newlines with <br> tags
            text = text.replace(/\n/g, '<br>');
            // Then replace formatting markers with HTML tags
            text = text.replace(/\*(.*?)\*/g, '<strong>$1</strong>'); // Bold
            text = text.replace(/_([^_]+)_/g, '<em>$1</em>'); // Italic
            text = text.replace(/-(.*?)-/g, '<u>$1</u>'); // Underline
            text = text.replace(/\(&quot;(.*?)&quot;\)/g, '<q>$1</q>'); // Quotes
            text = text.replace(/\(([^)]+)\)/g, '<q>$1</q>'); // Parentheses quotes
            text = text.replace(/\[(.*?)\]/g, '<span style="color: #ff9800;">$1</span>'); // Technique/emphasis
            text = text.replace(/~(.*?)~/g, '<span style="color: #4caf50; background: #4caf5020; padding: 0 4px; border-radius: 3px;">$1</span>'); // Spoiler
            return text;
        }

        async function sendMessage(event) {
            event.preventDefault();
            const input = document.getElementById('messageInput');
            let messageText = input.value.trim();
            
            // Apply formatting if not empty
            if (messageText) {
                messageText = formatMessageText(messageText);
            }
            const messageButton = document.getElementById('messageButton');
            messageButton.disabled = true; 
            const usuario = "<%= user.username %>";
            const texto = input.value; // Don't trim to preserve newlines
            const imageInput = document.getElementById('imageInput');  // Referência ao input de imagem


            if (!texto && imageInput.files.length === 0) {
                alert('Digite uma mensagem ou selecione uma imagem!');
                return;
            }

            // Cria o FormData para enviar tanto texto quanto imagem
            const formData = new FormData();
            formData.append('usuario', usuario);
            formData.append('texto', texto);

            // Se uma imagem foi selecionada, adiciona ela ao FormData
            if (imageInput.files.length > 0) {
                formData.append('image', imageInput.files[0]);
            }

            try {
                input.value = ''; // Limpa o campo de texto
                imageInput.value = ''; // Limpa o campo de imagem (se houver)
                document.getElementById('imagePreview').style.display = 'none'; // Esconde o preview
                document.getElementById('global').style.marginBottom = '0'; // Reseta a margem
                const response = await fetch('/api/messages', {
                    method: 'POST',
                    body: formData, // Envia o FormData
                });


                if (response.ok) {
                    input.value = ''; // Limpa o campo de texto
                    imageInput.value = ''; // Limpa o campo de imagem (se houver)
                    messageButton.disabled = false;
                    // Aguarda a atualização da interface após a mensagem ser enviada
                    setTimeout(() => {
                        const messagesList = document.getElementById('messages');
                        const lastMessage = messagesList.lastElementChild;
                        if (lastMessage) {
                            lastMessage.scrollIntoView({ behavior: 'smooth' });
                            document.getElementById('messageInput').style.height = "50px";
                        }
                    }, 200);
                } else {
                    console.error('Erro ao enviar mensagem');
                }
            } catch (error) {
                console.error('Erro ao enviar mensagem:', error);
            }
        }




    </script>

</head>

<body>
    <div id="chatHeader" style="position: fixed; top: 0; left: 0; right: 0; height: 72px; background-color: #1e1e1e; display: flex; align-items: center; padding: 0 16px; border-bottom: 1px solid #333; z-index: 10;">
        <div style="display: flex; align-items: center; gap: 12px; width: 100%;">
            <img id="chatProfile" src="https://i.pinimg.com/736x/ee/51/73/ee5173dd81b2abc23de6df5a5b671548.jpg" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;">
            <div style="flex: 1;">
                <h3 style="margin: 0; color: #fff; font-size: 16px;">Grupo RPG</h3>
                <p style="margin: 0; color: #9e9e9e; font-size: 12px;">Lyonel Pesyac.</p>
            </div>
            <button id="sidebarToggle" style="background: none; border: none; color: #fff; font-size: 20px; cursor: pointer;">☰</button>
        </div>
    </div>
    <div id="global" style="padding-top: 144px; margin-bottom: 20px; padding-bottom: 20px; overflow-y: auto; -webkit-overflow-scrolling: touch;">
        <ul id="messages" style="margin: 0; padding: 8px; padding-bottom: 80px;">
            <!-- As mensagens serão carregadas aqui dinamicamente em -->
        </ul> 
    </div>
    <div id="imagePreview" style="position: fixed; bottom: 72px; left: 0; right: 0; background: #1e1e1e; padding: 16px; display: none; border-top: 1px solid #333; z-index: 10; max-height: 200px; overflow: auto; border-radius: 12px 12px 0 0;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
            <span style="color: #fff; font-size: 14px;">Pré-visualização</span>
            <button onclick="document.getElementById('imagePreview').style.display='none'; document.getElementById('imageInput').value='';" style="background: none; border: none; color: #fff; cursor: pointer;">×</button>
        </div>
        <img id="previewImage" src="" alt="Pré-visualização da imagem"
            style="max-height: 180px; max-width: 100%; border-radius: 8px; display: block; margin: 0 auto; background-color: #2d2d2d; border: 5px solid rgba(0, 0, 0, 0.1);" />
    </div>
    <div id="formattingGuideModal" style="display: none; justify-content: center; align-items: center; flex-direction: column; position: fixed; top: 80px; left: 50%; transform: translateX(-50%); background: #2d2d2d; padding: 20px; border-radius: 10px; max-width: 90%; width: 400px; z-index: 30; box-shadow: 0 4px 12px rgba(0,0,0,0.3);">
        <h3 style="margin-top: 0; color: #1a73e8;">Guia de Formatação</h3>
        <ul style="text-align: center;">
            <li><strong>**negrito**</strong> → <strong>negrito</strong></li>
            <li><em>__itálico__</em> → <em>itálico</em></li>
            <li><q>("citação")</q> → <q>citação</q></li>
            <li><span style="color: #ff9800;">[técnica]</span> → <span style="color: #ff9800;">técnica</span></li>
            <li><span style="text-decoration: underline;">_sublinhado_</span> → <span style="text-decoration: underline;">sublinhado</span></li>
            <li><span style="color: #4caf50;">~spoiler~</span> → <span style="color: #4caf50; background: #4caf5020; padding: 0 4px; border-radius: 3px;">spoiler</span></li>
        </ul>
        <button onclick="document.getElementById('formattingGuideModal').style.display='none'" style="background: #1a73e8; color: white; border: none; padding: 8px 16px; border-radius: 5px; margin-top: 10px; cursor: pointer;">Fechar</button>
    </div>

    <form id="messageForm" onsubmit="sendMessage(event)" style="position: fixed; bottom: 0; left: 0; right: 0; z-index: 20;">
        <div style="display: flex; align-items: center; gap: 4px; padding: 12px 10px; width: 100%; box-sizing: border-box;">
            <button type="button" onclick="document.getElementById('formattingGuideModal').style.display='flex'" style="position: fixed; right: 20px; top: 100px; background: #2d2d2d; border: none; padding: 8px; color: #9e9e9e; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2); z-index: 25;">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M8 14C8 14 9.5 16 12 16C14.5 16 16 14 16 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M9 9H9.01" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M15 9H15.01" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
            <button type="button" onclick="document.getElementById('imageInput').click()"
                style="background: none; border: none; padding: 8px; color: #9e9e9e; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer;">
                <svg width="64px" height="64px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                    <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                    <g id="SVGRepo_iconCarrier">
                        <path
                            d="M3 13V11C3 7.22876 3 5.34315 4.17157 4.17157C5.34315 3 7.22876 3 11 3H13C16.7712 3 18.6569 3 19.8284 4.17157C21 5.34315 21 7.22876 21 11V13C21 16.7712 21 18.6569 19.8284 19.8284C18.6569 21 16.7712 21 13 21H12"
                            stroke="#ffffff"></path>
                        <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M18.9976 14.2904L18.4033 13.6961L18.3931 13.6858L18.393 13.6858C18.3245 13.6173 18.2784 13.5712 18.2394 13.5353C17.0477 12.4403 15.1454 12.749 14.3611 14.1647C14.3354 14.2111 14.3062 14.2694 14.2628 14.3561L14.2564 14.369C14.227 14.4278 14.22 14.4416 14.2161 14.4486C14.0513 14.7448 13.6458 14.7948 13.4142 14.5474C13.4087 14.5415 13.3985 14.5298 13.3557 14.4799L8.37962 8.67449C8.19991 8.46483 7.88426 8.44055 7.6746 8.62026C7.46494 8.79997 7.44065 9.11562 7.62037 9.32528L12.5964 15.1307L12.6038 15.1393L12.6038 15.1393C12.6352 15.1759 12.6614 15.2066 12.6842 15.2309C13.3793 15.9731 14.5957 15.8233 15.09 14.9348C15.1062 14.9056 15.1242 14.8695 15.1458 14.8263L15.1508 14.8162C15.203 14.712 15.2218 14.6746 15.2358 14.6493C15.7064 13.7999 16.8478 13.6147 17.5628 14.2717C17.5841 14.2912 17.6138 14.3208 17.6962 14.4032L18.9755 15.6825C18.9887 15.2721 18.9948 14.812 18.9976 14.2904Z"
                            fill="#ffffff"></path>
                        <circle cx="16.5" cy="7.5" r="1.5" fill="#ffffff"></circle>
                        <path
                            d="M8 16V15.5H8.5V16H8ZM3.31235 20.3904C3.09672 20.5629 2.78207 20.528 2.60957 20.3123C2.43706 20.0967 2.47202 19.7821 2.68765 19.6096L3.31235 20.3904ZM7.5 21V16H8.5V21H7.5ZM8 16.5H3V15.5H8V16.5ZM8.31235 16.3904L3.31235 20.3904L2.68765 19.6096L7.68765 15.6096L8.31235 16.3904Z"
                            fill="#ffffff"></path>
                    </g>
                </svg>
            </button>
            <textarea id="messageInput" placeholder="Digite sua mensagem..."
                style="resize: none; flex: 1 1 auto; height: 50px; max-height: 200px; padding: 8px 10px; border-radius: 10px; font-size: 16px; margin: 0 5px;"
                oninput="autoResize(this)"></textarea>

            <!-- Campo para upload de imagem -->
            <input type="file" id="imageInput" accept="image/*" style="display: none;" />
            <!-- Botão de enviar -->
            <button id="messageButton" type="submit"
                style="background-color: #1a73e8; color: white; border: none; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: background-color 0.2s;">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <path d="M22 2L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
    </form>
    
</div>
</div>
<div id="sidebar" style="position: fixed; top: 0; left: -300px; width: 300px; height: 100vh; background-color: #1e1e1e; z-index: 30; transition: left 0.3s; overflow-y: auto; border-right: 1px solid #333;">
        <div style="padding: 16px; border-bottom: 1px solid #333;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                <h3 style="margin: 0; color: #fff;">Membros do Grupo</h3>
                <button id="closeSidebar" style="background: none; border: none; color: #fff; font-size: 20px; cursor: pointer;">×</button>
            </div>
            <div id="membersList" style="display: flex; flex-direction: column; gap: 8px;">
                <% users.forEach(element => {%>
                    <div style="display: flex; align-items: center; gap: 12px; padding: 8px; border-radius: 8px; background-color: #2d2d2d;">
                        <img src="<%=element.perfil%>" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;">
                        <div>
                            <% if (user.username == element.username) { %>
                            <p style="margin: 0; color: #fff;">(Você) <%=element.username%></p>
                            <% } else {%>
                            <p style="margin: 0; color: #fff;"><%=element.username%></p>
                            <%}%>

                            <p style="margin: 0; color: #9e9e9e; font-size: 12px;"><%=element.number%></p>
                        </div>
                    </div> 
                <%});%>
            </div>
        </div>
    </div>
</div>
</body>

</html> guidemodal
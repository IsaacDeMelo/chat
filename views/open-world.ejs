<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Open-World</title>
    <style>
        *{
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', 'Helvetica Neue', sans-serif;
            margin: 0;
            background-color: #2c2c2c;
            color: #fff;
        }

        .navbar {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            background: rgba(30, 30, 30, 0.9);
            padding: 10px;
            border-radius: 50px;
            z-index: 1000;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
            border: 2px solid black;
        }

        .nav-button {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #1a73e8;
            color: white;
            border: none;
            font-size: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .nav-button:hover {
            background: #0a84ff;
            transform: scale(1.1);
        }

        .nav-button.active {
            background: #0a84ff;
        }

        .hunter-card {
            padding: 25px;
            border: none;
            border-radius: 16px;
            text-align: center;
            width: 90%;
            transition: all 0.3s ease;
            max-height: 264px;
            overflow: hidden;
            background: linear-gradient(145deg, #1c1c1e 0%, #2c2c2e 100%);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
            position: fixed;
            top: 70px;
            left: 50%;
            transform: translateX(-50%);
            overflow: hidden;
            margin: 0 auto;
            border: 1px solid #333;
            z-index: 999;
            display: none;
        }

        .hunter-card.collapsed {
            max-height: 0;
            padding: 0;
            margin: 0;
            opacity: 0;
            border: none;
        }

        .hunter-card::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 50px;
            background: rgb(20, 20, 20);
            opacity: 0.9;
        }

        #hunter-image {
            border-radius: 18px;
            border: 4px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            margin: 20px auto;
            width: 160px;
            height: 160px;
            object-fit: cover;
            display: block;
            position: relative;
            z-index: 2;
            background: #333;
        }

        .hunter-info {
            margin-top: 10px;
            text-align: left;
            border-top: 1px solid rgba(255, 255, 255, 0.05);
            padding: 20px 0 0;
        }

        .hunter-info p {
            margin: 12px 0;
            font-size: 15px;
            color: #e5e5ea;
            display: flex;
            justify-content: space-between;
        }

        .hunter-info p span {
            font-weight: 600;
            color: #0a84ff;
        }

        .hunter-info p strong {
            color: #8e8e93;
            font-weight: 500;
        }
        .hunter-money{
            display: flex;
            justify-content: left;
            align-items: center;
        }

        .map-container {
            width: 100%;
            height: 100vh;
            overflow: scroll;
            position: fixed;
            top: 75px;
            left: 50%;
            transform: translateX(-50%);
            cursor: grab;
            background: linear-gradient(145deg, #0a1a2e 0%, #1a3a5a 100%);
            border: 4px solid rgb(44, 44, 44);
            box-shadow: -1px 2px 0px 3px black;
            display: none;
            z-index: 900;
        }

        #map-image {
            position: absolute;
            width: 1200px;
            height: auto;
            transform-origin: 0 0;
            transition: transform 0.1s ease-out;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.7);
        }

        .navigation-ui {
            position: fixed;
            top: 300px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(30, 30, 30);
            padding: 15px;
            border-radius: 50px;
            display: none;
            gap: 10px;
            z-index: 1000;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
            border: 2px solid black;
        }

        .nav-button {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #2a91ff;
            color: white;
            border: none;
            font-size: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .nav-button:hover {
            background: #1a73e8;
            transform: scale(1.1);
        }

    </style>
</head>

<body>
    <div class="main">
        <div class="navbar">
            <button id="toggle-card" class="nav-button">üë§</button>
            <button id="toggle-map" class="nav-button">üó∫Ô∏è</button>
        </div>
        <div class="hunter-card" id="hunter-card">
            <input type="file" id="hunter-image-upload" accept="image/*" style="display: none;">
            <img id="hunter-image" src="" alt="Hunter Image"
                style="max-width: 150px; max-height: 150px; display: none; cursor: pointer; margin-top: 0px;">

            <div class="hunter-info">
                <p><strong>Nome:</strong> <span id="hunter-name"><%=user.data.nome%> <%=user.data.familia%></span></p>
                <p><strong>Nen:</strong> <span id="nen-type"><%=user.data.tipoRatsu%></span></p>
                <p><strong>Raridade:</strong> <span id="rarity"><%=user.data.raridadeNen%></span></p>
            </div>
            <div class="hunter-money">
                <div style="padding: 10px; background-color:rgb(20, 20, 20); border: 3px solid rgb(12, 12, 12); display: flex; justify-content: center; align-items: center; flex-direction: column;">
                    <svg style="margin: 5px;" width="24px" height="24px" viewBox="0 0 36 36" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--twemoji" preserveAspectRatio="xMidYMid meet" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><circle fill="#F4900C" cx="18" cy="19" r="17"></circle><circle fill="#FFCC4D" cx="18" cy="17" r="17"></circle><circle fill="#FFE8B6" cx="18" cy="18" r="14"></circle><circle fill="#FFAC33" cx="18" cy="17" r="14"></circle><path fill="#FFE8B6" d="M9.543 10.856c0-.545.535-.763.535-.763l7.878-3.7l7.953 3.7s.548.122.548.767v.641H9.543v-.645z"></path><path fill="#F4900C" d="M25.929 12.836c0-.584-.505-1.057-1.127-1.057H11.129c-.623 0-1.057.473-1.057 1.057c0 .397.204.739.529.92v.666h2.114v-.529h2.114v.529h2.114v-.529h2.114v.529h2.114v-.529h2.114v.529H25.4v-.693c.317-.188.529-.517.529-.893zM27.514 24a.793.793 0 0 1-.793.793H9.279a.793.793 0 1 1 0-1.586h17.443c.437 0 .792.355.792.793z"></path><path fill="#F4900C" d="M26.457 12.2a.529.529 0 0 1-.529.529H10.071a.53.53 0 0 1 0-1.058l15.857.003a.527.527 0 0 1 .529.526zm-14.271.614h11.629V14H12.186z"></path><path fill="#FFD983" d="M12.714 20.829c0 .584-.316 1.057-.705 1.057h-.705c-.389 0-.705-.473-.705-1.057v-8.014c0-.584.316-1.057.705-1.057h.705c.389 0 .705.473.705 1.057v8.014zm12.686 0c0 .584-.315 1.057-.705 1.057h-.705c-.389 0-.705-.473-.705-1.057v-8.014c0-.584.315-1.057.705-1.057h.705c.389 0 .705.473.705 1.057v8.014zm-8.457 0c0 .584-.316 1.057-.705 1.057h-.705c-.389 0-.705-.473-.705-1.057v-8.014c0-.584.316-1.057.705-1.057h.705c.389 0 .705.473.705 1.057v8.014zm4.228 0c0 .584-.316 1.057-.705 1.057h-.704c-.389 0-.705-.473-.705-1.057v-8.014c0-.584.316-1.057.705-1.057h.704c.389 0 .705.473.705 1.057v8.014z"></path><path fill="#FFCC4D" d="M25.929 21.357c0 .584-.473 1.057-1.057 1.057H11.129a1.057 1.057 0 1 1 0-2.114h13.743c.583 0 1.057.473 1.057 1.057z"></path><path fill="#FFD983" d="M26.986 22.414c0 .584-.473 1.057-1.057 1.057H10.071a1.057 1.057 0 1 1 0-2.114h15.857c.584 0 1.058.473 1.058 1.057z"></path><path fill="#FFD983" d="M27.514 23.207a.793.793 0 0 1-.793.793H9.279a.793.793 0 1 1 0-1.586h17.443c.437 0 .792.355.792.793z"></path><path fill="#FFCC4D" d="M25.929 12.286c0-.584-.505-1.057-1.127-1.057H11.129c-.623 0-1.057.473-1.057 1.057c0 .397.204.739.529.92v.666h2.114v-.529h2.114v.529h2.114v-.529h2.114v.529h2.114v-.529h2.114v.529H25.4v-.693c.317-.188.529-.517.529-.893z"></path><path fill="#FFD983" d="M9.543 11.463c0-.545.535-.763.535-.763L17.956 7l7.953 3.7s.548.122.548.767v.291H9.543v-.295z"></path><path fill="#FFAC33" d="M18 8.343s-5.455 2.571-5.999 2.803c-.545.231-.363.611.001.611h11.97c.562 0 .429-.429-.017-.661C23.509 10.865 18 8.343 18 8.343z"></path><path fill="#FFD983" d="M26.457 11.757a.529.529 0 0 1-.529.529H10.071a.53.53 0 0 1 0-1.058l15.857.003a.527.527 0 0 1 .529.526z"></path></g></svg>
                    <%=user.data.dinheiro%>
                </div>
            </div>
        </div>
        <div class="map-container" style="width: 90%; height: 264px;">
            <img id="map-image" src="/World_Map.webp">
        </div>
        <div class="navigation-ui" style="display: none;">
                <button class="nav-button" id="zoom-in">+</button>
                <button class="nav-button" id="zoom-out">-</button>
                <button class="nav-button" id="reset-map">‚Üª</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Map pan and zoom functionality
            const mapContainer = document.querySelector('.map-container');
            const mapImage = document.getElementById('map-image');
            let isDragging = false;
            let startPos = { x: 0, y: 0 };
            let translate = { x: 0, y: 0 };
            let scale = 1;

            // Pan functionality
            mapContainer.addEventListener('mousedown', (e) => {
                isDragging = true;
                startPos = {
                    x: e.clientX - translate.x,
                    y: e.clientY - translate.y
                };
                mapContainer.style.cursor = 'grabbing';
            });

            document.addEventListener('mousemove', (e) => {
                if (!isDragging) return;
                translate.x = e.clientX - startPos.x;
                translate.y = e.clientY - startPos.y;
                updateMapTransform();
            });

            document.addEventListener('mouseup', (e) => {
                isDragging = false;
                mapContainer.style.cursor = 'grab';
            });


            // Zoom functionality
            mapContainer.addEventListener('wheel', (e) => {
                e.preventDefault();
                const zoomIntensity = 0.1;
                const wheelDelta = e.deltaY < 0 ? 1 : -1;
                
                // Calculate new scale with limits
                const newScale = Math.min(Math.max(0.5, scale + wheelDelta * zoomIntensity), 3);
                
                // Calculate mouse position relative to image
                const rect = mapContainer.getBoundingClientRect();
                const mouseX = e.clientX - rect.left;
                const mouseY = e.clientY - rect.top;
                
                // Calculate image position before scaling
                const imageX = mouseX - translate.x;
                const imageY = mouseY - translate.y;
                
                // Calculate new translate values to zoom at mouse position
                translate.x -= (imageX * newScale / scale) - imageX;
                translate.y -= (imageY * newScale / scale) - imageY;
                
                scale = newScale;
                updateMapTransform();
            });

            function updateMapTransform() {
                mapImage.style.transform = `translate(${translate.x}px, ${translate.y}px) scale(${scale})`;
            }

            // Reset transform on double click
            mapContainer.addEventListener('dblclick', () => {
                translate = { x: 0, y: 0 };
                scale = 1;
                updateMapTransform();
            });

            // Navigation buttons functionality
            document.getElementById('zoom-in').addEventListener('click', () => {
                scale = Math.min(3, scale + 0.2);
                updateMapTransform();
            });

            document.getElementById('zoom-out').addEventListener('click', () => {
                scale = Math.max(0.5, scale - 0.2);
                updateMapTransform();
            });

            document.getElementById('reset-map').addEventListener('click', () => {
                translate = { x: 0, y: 0 };
                scale = 1;
                updateMapTransform();
            });

            // Navbar toggle functionality
            const toggleCardButton = document.getElementById('toggle-card');
            const toggleMapButton = document.getElementById('toggle-map');
            const hunterCard = document.getElementById('hunter-card');
            const mapElement = document.querySelector('.map-container');
            
            // Initialize display states
            hunterCard.style.display = 'none';
            mapElement.style.display = 'none';
            
            toggleCardButton.addEventListener('click', function() {
                if (hunterCard.style.display === 'none') {
                    hunterCard.style.display = 'block';
                    mapElement.style.display = 'none';
                    toggleCardButton.classList.add('active');
                    toggleMapButton.classList.remove('active');
                    const navUI = document.querySelector('.navigation-ui');
                    navUI.style.display = 'none';
                } else {
                    hunterCard.style.display = 'none';
                    toggleCardButton.classList.remove('active');
                }
            });
            
            toggleMapButton.addEventListener('click', function() {
                if (mapElement.style.display === 'none') {
                    mapElement.style.display = 'block';
                    hunterCard.style.display = 'none';
                    toggleMapButton.classList.add('active');
                    toggleCardButton.classList.remove('active');
                    const navUI = document.querySelector('.navigation-ui');
                    navUI.style.display = 'flex';

                } else {
                    const navUI = document.querySelector('.navigation-ui');
                    navUI.style.display = 'none';
                    mapElement.style.display = 'none';
                    toggleMapButton.classList.remove('active');
                }
            });

            const uploadInput = document.getElementById('hunter-image-upload');
            const hunterImage = document.getElementById('hunter-image');
            // Check if image is already saved
            const savedImage = localStorage.getItem('hunterImage');
            if (savedImage) {
                hunterImage.src = savedImage;
                hunterImage.style.display = 'block';
            }

            // Make image clickable for upload
            hunterImage.addEventListener('click', function() {
                uploadInput.click();
            });

            uploadInput.addEventListener('change', function (e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (event) {
                        const imageData = event.target.result;
                        // Save to localStorage
                        localStorage.setItem('hunterImage', imageData);
                        // Display the image
                        hunterImage.src = imageData;
                        hunterImage.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                }
            });

        });
    </script>
</body>

</html>